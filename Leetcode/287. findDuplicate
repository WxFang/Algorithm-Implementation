/* O(nlogn) Binary search; Pigeonhole principle */
public class Solution {
    public int findDuplicate(int[] nums) {
        int right = nums.length - 1, left = 1;
        while(left < right){
            int count = 0;
            int mid = (left + right) / 2;
            for(int n: nums)
                if(n <= mid)
                    count++;
            if(count > mid) right = mid;
            else left = mid + 1;
        }
        return right;
    }
}

/* O(n) Linked List Cycle */
public class Solution {
    public int findDuplicate(int[] nums) {
        int slow = 0, fast = 0;
        while(true){
            slow = nums[slow];
            fast = nums[nums[fast]];
            if(slow == fast) break;
        }
        fast = 0;
        while(slow != fast){
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;
    }
}