/* avoid zero problem, brilliant idea */
public class Solution {
    public int[] productExceptSelf(int[] nums) {
        int[] res = new int[nums.length];
        res[0] = 1;
		// left
        for(int i = 1; i < nums.length; i++)
            res[i] = res[i - 1] * nums[i - 1];
		// right
        int right = 1;
        for(int i = nums.length - 1; i >= 0; i--){
            res[i] *= right;
            right *= nums[i];
        }
        return res;
    }
}

/* handle corner case when count of zero is 0, 1, over 2 */
public class Solution {
    public int[] productExceptSelf(int[] nums) {
        int product = 1, count = 0;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] != 0)
                product *= nums[i];
            else 
                count++;
        }
        
        if(count >= 2){
            for(int i = 0; i < nums.length; i++)
                nums[i] = 0;
            return nums;
        }
            
        for(int i = 0; i < nums.length; i++){
            if(nums[i] == 0)
                nums[i] = product;
            else
                nums[i] = count > 0 ? 0 : product / nums[i];
        }
        return nums;
    }
}