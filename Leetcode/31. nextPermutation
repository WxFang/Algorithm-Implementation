public class Solution {
    public void nextPermutation(int[] nums) {
        if(nums.length == 0) return;
        
        // search from right for first number which breaks descending order
        int i = nums.length - 2, j = nums.length - 1;
        while(i >= 0 && nums[i] >= nums[i+1])
            i--;

        // search from right for first bigger number than nums[i]
        // swap i and j
        if(i >= 0){
            while(nums[j] <= nums[i]) // there must be a bigger number than i on the right side
                j--;
            swap(nums, i, j);
        }
        
        // change order from i+1 to nums.length-1 to ascending order
        reverse(nums, i+1, nums.length - 1);
    }
    private void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    private void reverse(int[] nums, int i, int j){
        while(i < j)
            swap(nums, i++, j--);
    }
}