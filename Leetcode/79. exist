public class Solution {
    public boolean exist(char[][] board, String word) {
        boolean[][] visited = new boolean[board.length][board[0].length];
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board[0].length; j++){
                if(board[i][j] == word.charAt(0)){
                    if(helper(board, visited, word, i, j, 0))
                        return true;
                }
            }
        }
        return false;
    }
    private boolean helper(char[][] board, boolean[][] visited, String word, int i, int j, int pos){
        if(visited[i][j] || board[i][j] != word.charAt(pos))
            return false;
        if(pos == word.length() - 1)
            return true;
        visited[i][j] = true;
        if(i + 1 < board.length && !visited[i + 1][j]){
            if(helper(board, visited, word, i + 1, j, pos + 1))
                return true;
        }
        if(i - 1 >= 0 && !visited[i - 1][j]){
            if(helper(board, visited, word, i - 1, j, pos + 1))
                return true;
        }
        if(j + 1 < board[0].length && !visited[i][j + 1]){
            if(helper(board, visited, word, i, j + 1, pos + 1))
                return true;
        }
        if(j - 1 >= 0 && !visited[i][j - 1]){
            if(helper(board, visited, word, i, j - 1, pos + 1))
                return true;
        }
        visited[i][j] = false;
        return false;
    }
}