/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 /*initial code*/
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1==null || l2==null) return null;
        int border = 0;
        ListNode l3 = new ListNode(0);
        ListNode l4 = l3;
        while(l1!=null||l2!=null){
            int tmp = 0;
            if(l1!=null) tmp += l1.val;
            if(l2!=null) tmp += l2.val;
            ListNode newNode = new ListNode((tmp+border)%10);
            border = (tmp+border)/10;
            l3.next = newNode;
            l3 = l3.next;
            l1 = (l1!=null) ? l1.next : l1;
            l2 = (l2!=null) ? l2.next : l2;
        }
        if(border!=0){
            ListNode newNode = new ListNode(1);
            l3.next = newNode;
            l3 = newNode;
        }
        return l4.next;
    }
}

/*
Two things to make the code simple:

    Whenever one of the two ListNode is null, replace it with 0.
    Keep the while loop going when at least one of the three conditions is met.

*/
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1==null || l2==null) return null;
        int border = 0;
        ListNode l3 = new ListNode(0); // pointer
        ListNode l4 = l3; // head of new linked list
        while(l1!=null||l2!=null||border!=0){
            int tmp = ((l1!=null)?l1.val:0) + ((l2!=null)?l2.val:0) + border;  
            ListNode newNode = new ListNode(tmp%10);
            border = tmp/10;
            l3.next = newNode;
            l3 = l3.next;
            l1 = (l1!=null) ? l1.next : l1;
            l2 = (l2!=null) ? l2.next : l2;
        }
        return l4.next;
    }
}