// recursive
public class Solution {
    public void connect(TreeLinkNode root) {
        if(root == null)
            return;

        if(root.left != null)
            root.left.next = root.right;
        if(root.right != null && root.next != null)
            root.right.next = root.next.left;

        connect(root.left);
        connect(root.right);
    }
}

public class Solution {
    public void connect(TreeLinkNode root) {
        if(root == null)
            return;

        if(root.left != null){
            root.left.next = root.right;
            if(root.next != null)
                root.right.next = root.next.left;
        }

        connect(root.left);
        connect(root.right);
    }
}

// iterative
public class Solution {
    public void connect(TreeLinkNode root) {
        if(root == null) return;
        Queue<TreeLinkNode> q = new LinkedList<>();
        q.add(root);
        int count = 1;
        TreeLinkNode pre = null;
        while(!q.isEmpty()){
            TreeLinkNode cur = q.poll();
            if(cur.left != null) q.add(cur.left);
            if(cur.right != null) q.add(cur.right);
            count--;
            if(pre != null) pre.next = cur;
            pre = cur;
            if(count == 0){
                cur.next = null;
                count = q.size();
                pre = null;
            }
        }
    }
}