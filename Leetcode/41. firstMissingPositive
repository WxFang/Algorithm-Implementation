// The key here is to use swapping to keep constant space and also make use of the 
// length of the array, which means there can be at most n positive integers. 
// So each time we encounter an valid integer, find its correct position and swap. 
// Otherwise we continue.
public class Solution {
    public int firstMissingPositive(int[] nums) {
        for(int i = 0; i < nums.length; i++)
            while(nums[i] > 0 && nums[i] < nums.length && nums[i] != i + 1 && nums[i] != nums[nums[i] - 1])
                swap(nums, i);
        int i = 0;
        for(; i < nums.length; i++)
            if(nums[i] != i + 1)
                return i + 1;
        return i + 1;
    }
    private void swap(int[] nums, int i){
        int temp = nums[nums[i] - 1];
        nums[nums[i] - 1] = nums[i];
        nums[i] = temp;
    }
}