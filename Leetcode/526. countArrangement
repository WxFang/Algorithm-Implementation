/* without using global variables */
public class Solution {
    public int countArrangement(int N) {
        boolean[] visited = new boolean[N];
        return helper(N, 1, visited);
    }
    private int helper(int N, int pos, boolean[] visited){
        if(pos == N + 1) return 1;
        if(pos > N + 1) return 0;
        int res = 0;
        for(int i = 1; i <= N; i++){
            if(visited[i - 1] == true || (pos % i != 0 && i % pos != 0)) continue;
            visited[i - 1] = true;
            res += helper(N, pos + 1, visited);
            visited[i - 1] = false;
        }
        return res;
    }
}

/* straightforward but not fast; use global variable */
public class Solution {
    private int res = 0;
    public int countArrangement(int N) {
        boolean[] visited = new boolean[N];
        helper(N, 1, visited);
        return res;
    }
    private void helper(int N, int pos, boolean[] visited){
        if(pos == N + 1){
            res++;
            return;
        }
        if(pos > N + 1) return;
        for(int i = 1; i <= N; i++){
            if(visited[i - 1] == true || (pos % i != 0 && i % pos != 0)) continue;
            visited[i - 1] = true;
            helper(N, pos + 1, visited);
            visited[i - 1] = false;
        }
    }
}