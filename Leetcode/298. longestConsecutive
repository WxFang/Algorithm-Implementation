
// without global variance
class Solution {
    public int longestConsecutive(TreeNode root) {
        if(root == null) return 0;
        return helper(root, root.val, 0, 1);
    }
    private int  helper(TreeNode root, int target, int sum, int max){
        if(root == null) return max;
        if(root.val == target) sum++;
        else sum = 1;
        max = Math.max(sum, max);
        return Math.max(helper(root.left, root.val + 1, sum, max), helper(root.right, root.val + 1, sum, max));
    }
}


// with global variance
class Solution {
    private int max = 0;
    public int longestConsecutive(TreeNode root) {
        if(root == null) return 0;
        helper(root.left, root.val, 1);
        helper(root.right, root.val, 1);
        return max;
    }
    private void helper(TreeNode root, int pre, int sum){
        if(sum > max) max = sum;
        if(root == null) return;
        if(root.val == pre + 1){
            helper(root.left, root.val, sum + 1);
            helper(root.right, root.val, sum + 1);
        }
        else{
            helper(root.left, root.val, 1);
            helper(root.right, root.val, 1);
        }
    }
}

// global variance; more concise version
class Solution {
    private int max = 0;
    public int longestConsecutive(TreeNode root) {
        if(root == null) return 0;
        helper(root, root.val, 0);
        return max;
    }
    private void helper(TreeNode root, int target, int sum){
        if(root == null) return;
        if(root.val == target) sum++;
        else sum = 1;
        max = Math.max(sum, max);
        helper(root.left, root.val + 1, sum);
        helper(root.right, root.val + 1, sum);
    }
}