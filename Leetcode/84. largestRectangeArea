public class Solution {
    public int largestRectangleArea(int[] heights) {
        Stack<Integer> st = new Stack();
        int max = 0;
        for(int i = 0; i <= heights.length; i++){
            int h = (i == heights.length) ? 0 : heights[i];
            if(st.isEmpty() || h >= heights[st.peek()])
                st.push(i);
            else{
                int left = st.pop();
                max = Math.max(max, heights[left] * (st.isEmpty() ? i : i - st.peek() - 1));
                i--;
            }
        }
        return max;
    }
}

// time limit exceeded
public class Solution {
    public int largestRectangleArea(int[] heights) {
        int[][] dp = new int[heights.length][2];
        int max = 0;
        for(int i = 0; i < heights.length; i++){
            dp[i][0] = heights[i];
            dp[i][1] = heights[i];
        }
        for(int i = 0; i < heights.length; i++){
            max = Math.max(max, dp[i][1]);
            for(int j = 0; j < i; j++){
                if(Math.min(dp[j][0], heights[i]) * (i - j + 1) > dp[j][1])
                    dp[j][1] = Math.min(dp[j][0], heights[i]) * (i - j + 1);
                dp[j][0] = Math.min(dp[j][0], heights[i]);
                max = Math.max(max, dp[j][1]);
            }
        }
        return max;
    }
}