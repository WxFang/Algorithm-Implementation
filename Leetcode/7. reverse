/* primitive code */
public class Solution {
    public int reverse(int x) {
        if(Math.abs(x) >= Math.pow(2, 31)) return 0;
        int flag = 0, length = 0;
        int res = 0;
        
        // make a flag for negative number
        if(x < 0){
            flag = 1;
            x = -x;
        }
        
        // compute length of digits
        for(int j=32; j>=0; j--){
            if((int)(x/Math.pow(10, j)) > 0){
                length = j + 1;
                break;
            }
        }
        // reverse it and get the result
        for(int i=length-1; i>=0; i--){      
            // check if overflow
            if((x/Math.pow(10, i))>= (Math.pow(2, 31) - res)/(int)Math.pow(10, length - 1 - i)) return 0;
            res += (int)(x/Math.pow(10, i)) * (int)Math.pow(10, length - 1 - i);
            x = x % (int)Math.pow(10, i);
        }
        if(flag == 1) res = -res;
        return res;
    }
}

/* clean */
public class Solution {
    public int reverse(int x) {
        if(Math.abs(x) >= Integer.MAX_VALUE) return 0;
        int length = 0, res = 0;
        for(int i=11; i>=0; i--){      
            if(length > 0){
                if(Math.abs(x/Math.pow(10, i))>= Math.abs((Integer.MAX_VALUE - res)/Math.pow(10, length - 1 - i))) return 0;
                res += (int)(x/Math.pow(10, i)) * (int)Math.pow(10, length - 1 - i);
                x = x % (int)Math.pow(10, i);
            }
            else if(length==0 && (int)(x/Math.pow(10, i)) != 0){
                length = i + 1;
                res += (int)(x/Math.pow(10, i)) * (int)Math.pow(10, length - 1 - i);
                x = x % (int)Math.pow(10, i);
            }
        }       
        return res;
    }
}

/* clear */
public class Solution {
    public int reverse(int x) {
        int sign = x<0 ? -1 : 1;
        int res = 0;
        x = Math.abs(x);
        while(x != 0){
            if(res >= (Integer.MAX_VALUE - x % 10) / (double)10) return 0;
            res = res * 10 + x % 10;
            x = x / 10;
        }
        return res * sign;
    }
}