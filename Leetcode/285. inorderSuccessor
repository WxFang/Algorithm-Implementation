/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
public class Solution {
    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        if(p.right!=null)
            return minValue(p.right);
        TreeNode succ = null;
        while(root!=null){
            if(root.val>p.val){
                succ = root;
                root = root.left;
            }
            else if(root.val<p.val){
                root = root.right;
            }
            else 
                break;
        }
        return succ;
    }
    private TreeNode minValue(TreeNode root){
        while(root!=null){
            if(root.left!=null)
                root = root.left;
            else break;
        }
        return root;
    }
}

/*iterative*/
public class Solution {
    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        TreeNode succ = p.right;
        while(root!=null){
            if(root.val>p.val){
                succ = root;
                root = root.left;
            }
            else if(root.val<=p.val){
                root = root.right;
            }
        }
        return succ;
    }
}

/*recursive*/
public class Solution {
    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        if(root==null) return root;
        if(root.val<=p.val){
            return inorderSuccessor(root.right, p);
        }
        else{
            TreeNode left = inorderSuccessor(root.left, p);
            return left!=null?left:root;
        }
    } 
}