/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder.length == 0 || preorder.length != inorder.length) return null;
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < inorder.length; i++) map.put(inorder[i], i);
        return helper(map, preorder, inorder, 0, 0, inorder.length - 1);
    }
    private TreeNode helper(Map<Integer, Integer> map, int[] preorder, int[] inorder, int pos, int boundL, int boundR){
        if(boundL > boundR || pos >= preorder.length) return null;
        TreeNode root = new TreeNode(preorder[pos]);
        int i = map.get(root.val);
        root.left = helper(map, preorder, inorder, pos + 1, boundL, i - 1);
        root.right = helper(map, preorder, inorder, pos + i - boundL + 1, i + 1, boundR);
        return root;
    }
}