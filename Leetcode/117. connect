// iterative O(1) space O(n) time
// level order traversal
public class Solution {
    public void connect(TreeLinkNode root) {
        if(root == null) return;
        TreeLinkNode head = null; // head for next level
        TreeLinkNode pre = null; // previous node for next level
        while(root != null){
            while(root != null){
                if(root.left != null){
                    if(pre == null)
                        head = root.left;
                    else 
                        pre.next = root.left;
                    pre = root.left;
                }
                if(root.right != null){
                    if(pre == null)
                        head = root.right;
                    else
                        pre.next = root.right;
                    pre = root.right;
                }
                root = root.next;
            }
            root = head;
            head = null;
            pre = null;
        }
        
    }
}

// no need to create a new dummy head each loop
public class Solution {
    public void connect(TreeLinkNode root) {
        if(root == null) return;
        TreeLinkNode dummy = new TreeLinkNode(0);
        while(root != null){
            dummy.next = null;
            TreeLinkNode temp = dummy;
            while(root != null){
                if(root.left != null){
                    temp.next = root.left;
                    temp = temp.next;
                }
                if(root.right != null){
                    temp.next = root.right;
                    temp = temp.next;
                }
                root = root.next;
            }
            root = dummy.next;
        }
    }
}


// O(log(n)) space
public class Solution {
    public void connect(TreeLinkNode root) {
        if(root == null) return;
        while(root != null){
            TreeLinkNode dummy = new TreeLinkNode(0);
            TreeLinkNode temp = dummy;
            while(root != null){
                if(root.left != null){
                    temp.next = root.left;
                    temp = temp.next;
                }
                if(root.right != null){
                    temp.next = root.right;
                    temp = temp.next;
                }
                root = root.next;
            }
            root = dummy.next;
        }
    }
}