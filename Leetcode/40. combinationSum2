/* fast */
public class Solution {
    public List<List<Integer>> combinationSum2(int[] cand, int target) {
        Arrays.sort(cand);
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<Integer> path = new ArrayList<Integer>();
        dfs_com(cand, 0, target, path, res);
        return res;
    }
    void dfs_com(int[] cand, int cur, int target, List<Integer> path, List<List<Integer>> res) {
        if (target < 0) return;
        if (target == 0) {
            res.add(new ArrayList(path));
            return ;
        }
        for (int i = cur; i < cand.length; i++){
            // when i = cur, it means 
            if (i > cur && cand[i] == cand[i-1]) continue;
            path.add(path.size(), cand[i]);
            dfs_com(cand, i+1, target - cand[i], path, res);
            path.remove(path.size()-1);
        }
    }
}



/* slow */
public class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        backtrack(res, candidates, target, 0, new ArrayList<Integer>());
        return res;
    }
    
    private void backtrack(List<List<Integer>> res, int[] candidates, int target, int pos, ArrayList<Integer> list){
        if(target == 0 && !res.contains(list)){
            res.add(new ArrayList<Integer>(list)); // ArrayList is reference
            return;
        }
        
        if(pos >= candidates.length || target < 0) return; // index out of bound
        
        // target over zero
        if(target - candidates[pos] >= 0){
            list.add(candidates[pos]);
            backtrack(res, candidates, target - candidates[pos], pos + 1, list);
            list.remove(list.size() - 1);
        }
        backtrack(res, candidates, target, pos + 1, list);
    }
}
