// recursion; dps
public class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        List<List<Integer>> reverse = new ArrayList<List<Integer>>();
        traverse(root, res, 0);
        for(List<Integer> list: res)
            reverse.add(0, list);
        return reverse;
    }
    private void traverse(TreeNode root, List<List<Integer>> res, int level){
        if(root == null) return;
        if(res.size() == level)
            res.add(new ArrayList<Integer>());
        res.get(level).add(root.val);
        traverse(root.left, res, level + 1);
        traverse(root.right, res, level + 1);
    }
}


// queue; level traversal and reverse list
public class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if(root == null) return res;
        Queue<TreeNode> q = new ArrayDeque<TreeNode>();
        q.add(root);
        while(!q.isEmpty()){
            int size = q.size();
            List<Integer> list = new ArrayList<Integer>();
            for(int i = 1; i <= size; i++){
                TreeNode temp = q.poll();
                list.add(temp.val);
                if(temp.left != null) q.add(temp.left);
                if(temp.right != null) q.add(temp.right);
            }
            res.add(0, list);
        }
        return res;
    }
}