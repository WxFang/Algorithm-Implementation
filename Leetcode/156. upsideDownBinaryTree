// iterative; faster
public class Solution {
    public TreeNode upsideDownBinaryTree(TreeNode root) {
        if(root == null) return root;
        TreeNode cur = root;
        TreeNode left = null;
        TreeNode right = null;
        TreeNode prev = null;
        while(cur != null){
            left = cur.left;
            cur.left = right;
            right = cur.right;
            cur.right = prev;
            
            prev = cur;
            cur = left;
        }
        return prev;
    }
}


// upside down left side
// leave right side same as before
// dont forget make root node's children null
public class Solution {
    public TreeNode upsideDownBinaryTree(TreeNode root) {
        if(root == null || root.left == null) return root;
        TreeNode cur = root.left;
        TreeNode left = upsideDownBinaryTree(cur);
        cur.left = root.right;
        cur.right = root;
        root.left = null;
        root.right = null;
        return left;
    }
}