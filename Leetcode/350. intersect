// Two points
class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        List<Integer> arr = new ArrayList<>();
        int i = 0, j = 0;
        while(i < nums1.length && j < nums2.length){
            if(nums1[i] == nums2[j]){
                arr.add(nums1[i]);
                i++;
                j++;
            }
            else if(nums1[i] > nums2[j])
                while(j < nums2.length && nums2[j] < nums1[i]) j++;
            else 
                while(i < nums1.length && nums1[i] < nums2[j]) i++;
        }
        int[] res = new int[arr.size()];
        for(int k = 0; k < arr.size(); k++)
            res[k] = arr.get(k);
        return res;
    }
}

// HashMap O(m + n)
class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        HashMap<Integer, Integer> map = new HashMap<>();
        ArrayList<Integer> arr = new ArrayList<>();
        for(int n: nums1)
            map.put(n, map.getOrDefault(n, 0) + 1);
        for(int n: nums2){
            if(map.containsKey(n) && map.get(n) > 0){
                map.put(n, map.get(n) - 1);
                arr.add(n);
            }
        }
        int[] res = new int[arr.size()];
        for(int i = 0; i < arr.size(); i++)
            res[i] = arr.get(i);
        return res;
    }
}