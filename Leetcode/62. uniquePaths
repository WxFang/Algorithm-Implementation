// O(n) space O(n) time
public class Solution {
    public int uniquePaths(int m, int n) {
        if(m == 0 || n == 0) return 0;
        int[][] arr = new int[m][n];
        for(int i = m - 1; i >= 0; i--){
            for(int j = n - 1; j >= 0; j--){
                if(i == m - 1 || j == n - 1) 
                    arr[i][j] = 1;
                else
                    arr[i][j] = arr[i + 1][j] + arr[i][j + 1];
            }
        }
        return arr[0][0];
    }
}

// Math O(1) space
public class Solution {
    public int uniquePaths(int m, int n) {
        if(m == 0 || n == 0) return 0;
        double mn2 = 1;
        int i = m + n - 2, j = Math.min(m, n) - 1;
        while(i >= Math.max(m, n) || j >= 1){
            if(j < 1) mn2 = mn2 * i--;
            else if(i < 1) mn2 = mn2 / j--;
            else mn2 = mn2 / j-- * i--;
        }
        return (int)Math.round(mn2);
    }
}

// more concise
public class Solution {
    public int uniquePaths(int m, int n) {
        if(m == 0 || n == 0) return 0;
        double res = 1;
        for(int i = 1; i <= m - 1; i++)
            res = res * (n + i - 1) / i;
        return (int)res;
    }
}