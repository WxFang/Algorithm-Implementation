// recursive; faster
class Solution {
    public List<Integer> largestValues(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        if(root == null) return res;
        helper(root, res, 0);
        return res;
    }
    private void helper(TreeNode root, List<Integer> res, int level){
        if(root == null) return;
        if(res.size() == level) res.add(root.val);
        else if(res.get(level) < root.val)
            res.set(level, root.val);
        helper(root.left, res, level + 1);
        helper(root.right, res, level + 1);
    }
}

// iterative; slow
class Solution {
    public List<Integer> largestValues(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        if(root == null) return res;
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        int size = 1, max = Integer.MIN_VALUE;
        while(!q.isEmpty()){
            TreeNode cur = q.poll();
            if(cur.left != null) q.add(cur.left);
            if(cur.right != null) q.add(cur.right);
            size--;
            max = Math.max(max, cur.val);
            if(size == 0){
                res.add(max);
                max = Integer.MIN_VALUE;
                size = q.size();
            }
        }
        return res;
    }
}