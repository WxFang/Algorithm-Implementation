/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    private int max = 0;
    public int[] findFrequentTreeSum(TreeNode root) {
        HashMap<Integer, Integer> map = new HashMap<>();
        helper(root, map);
        List<Integer> list = new LinkedList<>();
        for(int key: map.keySet())
            if(map.get(key) == max) 
                list.add(key);
        int[] res = new int[list.size()];
        for(int i = 0; i < res.length; i++)
            res[i] = list.get(i);
        return res;
    }
    private int helper(TreeNode root, HashMap<Integer, Integer> map){
        if(root == null) return 0;
        int sum = root.val + helper(root.left, map) + helper(root.right, map);
        map.put(sum, map.getOrDefault(sum, 0) + 1);
        max = Math.max(max, map.get(sum));
        return sum;
    }
}