/*
The basic idea is this: at each step, we keep track of the furthest reachable index. 
The nature of the problem (eg. maximal jumps where you can hit a range of targets 
instead of singular jumps where you can only hit one target) is that for an index to 
be reachable, each of the previous indices have to be reachable.
*/
public class Solution {
    public boolean canJump(int[] nums) {
        if(nums.length == 0) return false;
        int max = 0; // furthest index it can jump to
        for(int i = 0; i < nums.length; i++){
            if(i > max) return false; // over furthest hit
            max = Math.max(max, i + nums[i]);
        }
        return true;
    }
}