/*Straightforward but stupid and slow*/
public class Solution {
    public int maxSubArrayLen(int[] nums, int k){
    
        int count=0, max=0;
        if(nums.length==0) return 0;
        
        for(int i=0; i<nums.length; i++){
            count += nums[i];
            nums[i] = count;
        }
        
        for(int i=nums.length-1; i>=0; i--){
            if(nums[i]==k)
                max=Math.max(max, i+1);
            else{
                for(int j=0; j<=i; j++){
                    if(nums[i]-nums[j]==k) {
                        max=Math.max(max, i-j);
                        break;
                    }
                }
            }
        }
        
        return max;
    }
}

/*Smart one using HashMap*/
public class Solution {
    public int maxSubArrayLen(int[] nums, int k){
        if(nums.length==0) return 0;
        
        int count=0, max=0;
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>(); 
        
        for(int i=0; i<nums.length; i++){
            count += nums[i];
            if(!map.containsKey(count)) map.put(count, i); // duplicate key will be covered
            if(count==k) max=i+1;
            else if(map.containsKey(count-k)) max=Math.max(max, i-map.get(count-k));
        }
        
        return max;
    }
}