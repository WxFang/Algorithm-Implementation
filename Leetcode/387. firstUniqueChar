// Frequency; O(2 * n)
class Solution {
    public int firstUniqChar(String s) {
        int[] freq = new int[26];
        for(int i = 0; i < s.length(); i++)
            freq[s.charAt(i) - 'a']++;
        for(int i = 0; i < s.length(); i++)
            if(freq[s.charAt(i) - 'a'] == 1)
                return i;
        return -1;
    }
}

// char array is faster
class Solution {
    public int firstUniqChar(String s) {
        int[] freq = new int[26];
        char[] arr = s.toCharArray();
        for(int i = 0; i < s.length(); i++)
            freq[arr[i] - 'a']++;
        for(int i = 0; i < s.length(); i++)
            if(freq[arr[i] - 'a'] == 1)
                return i;
        return -1;
    }
}

// two pointers
class Solution {
    public int firstUniqChar(String s) {
        if(s == null || s.length() == 0) return -1;
        int[] count = new int[256];
        char[] arr = s.toCharArray();
        int slow = 0, fast = -1, len = s.length();
        while(++fast < len){
            count[arr[fast]]++;
            while(slow < len && count[arr[slow]] > 1) slow++;
            if(slow == len) return -1;
        }
        return slow;
    }
}