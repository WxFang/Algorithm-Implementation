/* binary search */
public class Solution {
    public int search(int[] nums, int target) {
        if(nums.length == 0) return -1;
        int left = 0, right = nums.length - 1;
        while(left < right){
            int mid = (int)Math.ceil((left + right) / 2);
            if(nums[left] == target) return left;
            if(nums[right] == target) return right;
            if(nums[left] > nums[mid]){ // disordered side
                if(target >= nums[left] || target <= nums[mid]) right = mid;
                else left = mid;
            }
            else{ // ascending side
                if(target >= nums[left] && target <= nums[mid]) right = mid;
                else left = mid;
            }
           if(Math.abs(left - right) <= 1 && nums[left] != target && nums[right] != target) return -1;
        }
        return -1;
    }
}

/* revised, faster*/

public class Solution {
    public int search(int[] nums, int target) {
        if(nums.length == 0) return -1;
        int left = 0, right = nums.length - 1;
        while(left < right){
            int mid = (left + right) / 2;
            if(nums[mid] == target) return mid;
            if(nums[left] > nums[mid]){ // disordered side
                if(target < nums[mid] || target > nums[right]) right = mid - 1;
                else left = mid + 1;
            }
            else{ // ascending side
                if(target < nums[left] || target > nums[mid]) left = mid + 1;
                else right = mid - 1;
            }
        }
        return nums[left] == target ? left : -1; // if left == right
    }
}