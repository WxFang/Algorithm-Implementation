/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public boolean canAttendMeetings(Interval[] intervals) {
        Arrays.sort(intervals, new Comparator<Interval>(){
            public int compare(Interval i1, Interval i2){
                return i1.start - i2.start;
            }
        });
        for(int i=0; i<intervals.length-1; i++){
            if(intervals[i].end > intervals[i+1].start)
                return false;
        }
        return true;
    }
}

/*fast and tricky*/
public class Solution {
    public boolean canAttendMeetings(Interval[] intervals) {
            int len=intervals.length;
            if(len==0){
                return true;
            }
            int[]begin=new int[len];
            int[]stop=new int[len];
            for(int i=0;i<len;i++){
                begin[i]=intervals[i].start;
                stop[i]=intervals[i].end;
            }
            Arrays.sort(begin);
            Arrays.sort(stop);
            int endT=0;
            for(int i=1;i<len;i++){
                if(begin[i]<stop[i-1]){
                    return false;
                }
            }
            return true;
    }
}