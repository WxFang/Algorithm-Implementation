/* stupid one */
public class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if(nums.length == 0) return res;
        backtrack(res, new ArrayList<Integer>(), nums, 0, nums.length);
        return res;
    }
    private void backtrack(List<List<Integer>> res, ArrayList<Integer> list, int[] nums, int pos, int max){
        if(pos >= max || list.size() > max)
            return;
        if(list.size() == max){
            res.add(new ArrayList<Integer>(list));
            return;
        } 
        if(list.size() < max){
            for(int i = 0; i < max; i++){
                if(!list.contains(nums[(pos + i) % max])){
                    list.add(nums[(pos + i) % max]);
                    backtrack(res, list, nums, (pos + i) % max, max);
                    list.remove(list.size() - 1); 
                }
            }
        }
    }
}